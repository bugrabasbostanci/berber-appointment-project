generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider  = "postgresql"
  url       = env("DATABASE_URL")
  directUrl = env("DIRECT_URL")
}

model Profile {
  id           String   @id // UUID formatında, Supabase ID'leri ile uyumlu
  phone        String?
  role         Role     @default(customer)
  firstName    String?  @map("first_name")
  lastName     String?  @map("last_name")
  createdAt    DateTime @default(now()) @map("created_at")
  updatedAt    DateTime @default(now()) @map("updated_at")

  // İlişkiler


  @@map("profile")
}

enum Role {
  customer
  barber
  employee
  admin
}

model Shop {
  id                 String   @id @default(uuid())
  name               String
  description        String?
  ownerId            String   @map("owner_id")
  address            String?
  workingHours       Json?    @map("working_hours")
  createdAt          DateTime @default(now()) @map("created_at")
  updatedAt          DateTime @default(now()) @map("updated_at")

  // İlişkiler
  owner              Profile        @relation("Profile", fields: [ownerId], references: [id])

  @@map("shop")
}

model Appointment {
  id          String   @id @default(uuid())
  shopId      String   @map("shop_id")
  profileId   String   @map("profile_id")
  date        DateTime
  time        DateTime
  endTime     DateTime @map("end_time")
  notes       String?
  createdAt   DateTime @default(now()) @map("created_at")
  updatedAt   DateTime @default(now()) @map("updated_at")

  // İlişkiler
  shop        Shop     @relation(fields: [shopId], references: [id])
  review      Review?

  @@map("appointment")
}

model AvailableTime {
  id          String   @id @default(uuid())
  shopId      String   @map("shop_id")
  customerId  String   @map("customer_id")
  employeeId  String   @map("employee_id")
  date        DateTime
  isAvailable Boolean  @default(true) @map("is_available")
  timeSlots   Json     @map("time_slots")
  reason      String?
  createdAt   DateTime @default(now()) @map("created_at")
  updatedAt   DateTime @default(now()) @map("updated_at")

  // İlişkiler
  shop        Shop     @relation(fields: [shopId], references: [id])
  employee    Profile     @relation(fields: [employeeId], references: [id])
  customer    Profile     @relation(fields: [customerId], references: [id])

  @@map("available_time")
}

model Service {
  id          String   @id @default(uuid())
  shopId      String?  @map("shop_id")
  name        String
  description String?
  createdAt   DateTime @default(now()) @map("created_at")
  updatedAt   DateTime @default(now()) @map("updated_at")

  // İlişkiler
  shop        Shop    @relation(fields: [shopId], references: [id])

  @@map("service")
}

model Review {
  id            String   @id @default(uuid())
  shopId        String   @map("shop_id")
  rating        Int
  comment       String?
  createdAt     DateTime @default(now()) @map("created_at")

  // İlişkiler
  shop          Shop        @relation(fields: [shopId], references: [id])

  @@map("review")
}