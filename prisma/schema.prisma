generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider  = "postgresql"
  url       = env("DATABASE_URL")
  directUrl = env("DIRECT_URL")
}

model User {
  id        String   @id @default(uuid())
  email     String   @unique
  password  String
  phone     String?
  role      Role
  firstName String?  @map("first_name")
  lastName  String?  @map("last_name")
  createdAt DateTime @default(now()) @map("created_at")
  updatedAt DateTime @default(now()) @map("updated_at")

  // İlişkiler
  ownedShops       Shop[]          @relation("ShopOwner")
  employeeInShops  Shop[]          @relation("ShopEmployee")
  customerAppointments Appointment[] @relation("CustomerAppointment")
  staffAppointments    Appointment[] @relation("StaffAppointment")
  reviews           Review[]
  availableTimes    AvailableTime[]

  @@map("users")
}

enum Role {
  customer
  barber
  employee
  admin
}

model Shop {
  id                 String   @id @default(uuid())
  userId             String   @map("user_id")
  name               String
  description        String?
  ownerId            String   @map("owner_id")
  contactInformation Json?    @map("contact_information")
  address            String?
  location           String?  // PostgreSQL coğrafi verisi için özel işlem gerekebilir
  workingHours       Json?    @map("working_hours")
  createdAt          DateTime @default(now()) @map("created_at")
  updatedAt          DateTime @default(now()) @map("updated_at")

  // İlişkiler
  owner              User        @relation("ShopOwner", fields: [ownerId], references: [id])
  employees          User[]      @relation("ShopEmployee")
  appointments       Appointment[]
  services           Service[]
  availableTimes     AvailableTime[]
  reviews            Review[]

  @@map("shops")
}

model Appointment {
  id          String   @id @default(uuid())
  shopId      String   @map("shop_id")
  userId      String   @map("user_id")
  employeeId  String   @map("employee_id")
  date        DateTime
  time        DateTime
  endTime     DateTime @map("end_time")
  notes       String?
  createdAt   DateTime @default(now()) @map("created_at")
  updatedAt   DateTime @default(now()) @map("updated_at")

  // İlişkiler
  shop        Shop     @relation(fields: [shopId], references: [id])
  customer    User     @relation("CustomerAppointment", fields: [userId], references: [id])
  employee    User     @relation("StaffAppointment", fields: [employeeId], references: [id])
  review      Review?

  @@map("appointments")
}

model AvailableTime {
  id          String   @id @default(uuid())
  shopId      String   @map("shop_id")
  employeeId  String   @map("employee_id")
  date        DateTime
  isAvailable Boolean  @default(true) @map("is_available")
  timeSlots   Json     @map("time_slots")
  reason      String?
  createdAt   DateTime @default(now()) @map("created_at")
  updatedAt   DateTime @default(now()) @map("updated_at")

  // İlişkiler
  shop        Shop     @relation(fields: [shopId], references: [id])
  employee    User     @relation(fields: [employeeId], references: [id])

  @@map("available_times")
}

model Service {
  id          String   @id @default(uuid())
  shopId      String?  @map("shop_id")
  name        String
  description String?
  createdAt   DateTime @default(now()) @map("created_at")
  updatedAt   DateTime @default(now()) @map("updated_at")

  // İlişkiler
  shop        Shop?    @relation(fields: [shopId], references: [id])

  @@map("services")
}

model Review {
  id            String   @id @default(uuid())
  appointmentId String   @unique @map("appointment_id")
  userId        String   @map("user_id")
  shopId        String   @map("shop_id")
  rating        Int
  comment       String?
  createdAt     DateTime @default(now()) @map("created_at")

  // İlişkiler
  appointment   Appointment @relation(fields: [appointmentId], references: [id])
  user          User        @relation(fields: [userId], references: [id])
  shop          Shop        @relation(fields: [shopId], references: [id])

  @@map("reviews")
}