generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider  = "postgresql"
  url       = env("DATABASE_URL")
  directUrl = env("DIRECT_URL")
}

enum Role {
  CUSTOMER
  BARBER
  EMPLOYEE
  ADMIN
}

model User {
  id        String   @id @default(uuid())
  email     String   @unique
  phone     String?
  role      Role     @default(CUSTOMER)
  firstName String?  @map("first_name")
  lastName  String?  @map("last_name")
  provider  String?
  createdAt DateTime @default(now()) @map("created_at")
  updatedAt DateTime @updatedAt @map("updated_at")

  // Relations
  profile              Profile?
  ownedShops           Shop[]
  customerAppointments Appointment[] @relation("AppointmentCustomer")
  employeeAppointments Appointment[] @relation("AppointmentEmployee")
  reviews              Review[]      @relation("UserReviews")

  @@map("users")
}

model Profile {
  id              String   @id @default(uuid())
  userId          String   @unique @map("user_id")
  bio             String?
  availableTimeId String?  @map("available_time_id")
  createdAt       DateTime @default(now()) @map("created_at")
  updatedAt       DateTime @updatedAt @map("updated_at")

  // Relations
  user          User           @relation(fields: [userId], references: [id], onDelete: Cascade)
  availableTime AvailableTime? @relation(fields: [availableTimeId], references: [id])

  @@map("profiles")
}

model Shop {
  id           String   @id @default(uuid())
  name         String
  description  String?
  ownerId      String   @map("owner_id")
  address      String?
  workingHours Json?    @map("working_hours")
  createdAt    DateTime @default(now()) @map("created_at")
  updatedAt    DateTime @updatedAt @map("updated_at")

  // Relations
  owner          User            @relation(fields: [ownerId], references: [id])
  appointments   Appointment[]
  availableTimes AvailableTime[]
  services       Service[]
  reviews        Review[]

  @@map("shops")
}

model Appointment {
  id         String   @id @default(uuid())
  shopId     String   @map("shop_id")
  userId     String   @map("user_id")
  date       DateTime
  time       DateTime
  endTime    DateTime @map("end_time")
  notes      String?
  createdAt  DateTime @default(now()) @map("created_at")
  updatedAt  DateTime @updatedAt @map("updated_at")

  employeeId String?  @map("employee_id")
  employee   User?    @relation("AppointmentEmployee", fields: [employeeId], references: [id], onDelete: SetNull)

  shop       Shop     @relation(fields: [shopId], references: [id])
  user       User     @relation("AppointmentCustomer", fields: [userId], references: [id])
  reviewId   String?  @unique @map("review_id")
  review     Review?  @relation(fields: [reviewId], references: [id], onDelete: SetNull)

  @@map("appointments")
}

model AvailableTime {
  id          String   @id @default(uuid())
  shopId      String   @map("shop_id")
  date        DateTime
  isAvailable Boolean  @default(true) @map("is_available")
  timeSlots   Json     @map("time_slots")
  reason      String?
  createdAt   DateTime @default(now()) @map("created_at")
  updatedAt   DateTime @updatedAt @map("updated_at")

  // Relations
  shop     Shop      @relation(fields: [shopId], references: [id])
  profiles Profile[]

  @@map("available_times")
}

model Service {
  id          String   @id @default(uuid())
  shopId      String   @map("shop_id")
  name        String
  description String?
  price       Decimal  @default(0) @db.Decimal(10, 2)
  duration    Int      @default(45) // Duration in minutes
  createdAt   DateTime @default(now()) @map("created_at")
  updatedAt   DateTime @updatedAt @map("updated_at")

  // Relations
  shop Shop @relation(fields: [shopId], references: [id])

  @@map("services")
}

model Review {
  id        String   @id @default(uuid())
  shopId    String?  @map("shop_id")
  userId    String?  @map("user_id")
  rating    Int
  comment   String?
  createdAt DateTime @default(now()) @map("created_at")
  updatedAt DateTime @updatedAt @map("updated_at")

  // Relations
  shop Shop? @relation(fields: [shopId], references: [id])
  user User? @relation("UserReviews", fields: [userId], references: [id], onDelete: Cascade)
  appointment Appointment?

  @@map("reviews")
}
